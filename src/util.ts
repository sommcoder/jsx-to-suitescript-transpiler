import { SS } from "./ss-component-lib.js";

type Path = {
  buildCodeFrameError: (str: string) => {};
};

// titles are autogenerated since they follow certain criteria, that makes entering them for EACH component reptitive and verbose.
export function createComponentId(
  label: string,
  page?: string, // optional because the component COULD == Page
  parent?: string
): string {
  return `${"custpage_" + label.toLowerCase().split(" ").join("_")}${
    parent ? "_" + parent : ""
  }_${page}`;
}

interface Attribute {
  id: string;
}

export function getSSComponentCalls(
  comp: string,
  attr: Attribute,
  path: Path,
  children?: string[]
) {
  console.log("comp:", comp);
  console.log("attr:", attr);
  // jsx is NOT included in the SS library: error!
  if (!SS.hasOwnProperty(comp)) {
    throw path.buildCodeFrameError(
      `ERR: the jsx component: ${comp}, is NOT included in the ss library. Refer to docs to see included components`
    );
  }
  const id = createComponentId(attr.id);
  console.log("id:", id);

  // need to figure out the best way to Visit and take in the ui-name

  // How do we use the comp object and its functions to produce the template we want???
  const suiteScriptSyntax = `${SS[comp as keyof typeof SS].add(id)}\n${
    SS[comp as keyof typeof SS][attr as keyof typeof SS]
  }`;

  console.log("suiteScriptSyntax:", suiteScriptSyntax);

  return suiteScriptSyntax;
}

export function convertToCamelCase(label: string, path: Path): string {
  // No special character, underscore is allowed
  if (label && /^[a-zA-Z0-9_]+$/.test(label))
    return label
      .trim()
      .toLowerCase()
      .split(" ")
      .map((word, i) => {
        if (i !== 0)
          return word.charAt(0).toUpperCase() + word.slice(1, word.length);
        else return word;
      })
      .join("");
  else
    throw path.buildCodeFrameError(
      `ERROR: jsx label: ${label} contains special characters that are not permitted`
    );
}
