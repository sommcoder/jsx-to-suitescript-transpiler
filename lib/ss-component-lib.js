export { suiteScriptLibrary as SS };

const suiteScriptLibrary = {
  Form: {
    add: (props) => {
      return `const ${props.varName} = serverWidget.createForm({\n   title: '${
        props.title
      }',${props.hideNav ? `\n   hideNavBar: true` : ""}\n});`;
    },
    attributes: {
      isPage: true,
      possibleChildren: ["Sublist", "Field", "Button", "Tab", "FieldGroup"],
      possibleParents: null,
    },
    props: {
      variables: {
        parentVar: null,
        varName: null,
        title: null,
        module: null,
        fileId: null,
      },
      methods: {
        module: (props) =>
          `${props.varName}.clientScriptModulePath = '${props.module}';`,
        fileId: (props) =>
          `${props.varName}.clientScriptFileId = '${props.fileId}';`,
        init: (props) => `
          ${props.varName}.addPageInitPessage(${props.init});
          `,
      },
    },
  },
  List: {
    add: (props) => {
      return `const ${props.varName} = serverWidget.createList({\n   title: '${props.title}',\n});`;
    },
    attributes: {
      isPage: true,
      possibleChildren: ["Column", "Row", "Button"],
      possibleParents: null,
    },
    props: {
      variables: {
        parentVar: null,
        varName: null,
        title: null,
        module: null,
        fileId: null,
      },
      methods: {},
    },
  },
  Assistant: {
    add: (props) => {
      return `const ${
        props.varName
      } = serverWidget.createAssistant({\n   title: '${props.title}',${
        props.navBar ? `\n   hideNavBar: true` : ""
      }\n});`;
    },
    attributes: {
      isPage: true,
      possibleChildren: [
        "Sublist",
        "Field",
        "Button",
        "Tab",
        "FieldGroup",
        "Step",
      ],
      possibleParents: null,
    },
    props: {
      variables: {
        parentVar: null,
        varName: null,
        title: null,
        module: null,
        fileId: null,
      },
      methods: {},
    },
  },
  Tab: {
    add: (props) => {
      return `${props.pageVar}.addTab({\n   id: '${props.id}',\n    label: '${props.label}',\n});`;
    },
    attributes: {
      isPage: false,
      possibleChildren: ["Field", "Button", "Sublist", "FieldGroup"],
      possibleParents: ["Form", "List", "Assistant"],
    },
    props: {
      variables: {
        varName: null,
        parentVar: null,
        id: null,
        label: null,
        tab: null,
      },
      methods: {
        help: (props) => `${props.varName}.helpText = '${props.help}'`,
      },
    },
  },
  // PascalCase
  FieldGroup: {
    add: (props) => {
      return `const ${props.varName} = ${
        props.pageVar
      }.addFieldGroup({\n     id: '${props.id}',\n      label: '${
        props.label
      }',${props.parentId ? `\n      tab: '${props.parentId}'` : ""}\n});`;
    },
    attributes: {
      isPage: false,
      possibleChildren: ["Field", "Button"],
      possibleParents: ["Form", "Assistant", "List", "Tab"],
    },
    props: {
      variables: {
        parentVar: null,
        varName: null,
        id: null,
        label: null,
        tab: null,
        parentid: null,
      },
      methods: {
        single: (props) => `${props.varName}.isSingleColumn;`,
        collapsible: (props) => `${props.varName}.isCollapsible = true;`,
        collapsed: (props) => `${props.varName}.isCollapsed;`,
        borderHidden: (props) => `${props.varName}.isBorderHidden = true;`,
      },
    },
  },
  Sublist: {
    add: (props) => {
      return `const ${props.varName} = ${
        props.pageVar
      }.addSublist({\n    id: '${props.id}',\n    label: '${props.label}',${
        props.type ? `\n type: ${props.type},` : ""
      }${props.parentId ? `\n    tab: '${props.parentId}'` : ""}\n});`;
    },
    attributes: {
      isPage: false,
      possibleChildren: ["Field", "Button"],
      possibleParents: ["Form", "Assistant", "List", "Tab"],
    },
    props: {
      // props are what are encapsulated in each JSSX component tag
      variables: {
        possibleTypes: ["inlineeditor", "editor", "list", "staticlist"],
        label: null, // what the user wants to call the component
        type: null, // the type of component
        id: null, // the autogenerated id
        tab: null, // the tab variable that the component belongs to, inferred?
        parentVar: null,
        varName: null,
        pageVar: null,
      },
      methods: {
        markAll: (props) => `${props.varName}.addMarkAllButtons();`,
      },
    },
  },
  Field: {
    add: (props) => {
      return `const ${props.varName} = ${
        props.parentVar
      }.addField({\n    id: '${props.id}',${
        props.label
          ? `\n   label: '${props.label}'`
          : `\n    label: '${props.varName}'`
      },${props.type ? `\n    type: '${props.type}',` : ""}${
        props.parentId ? `\n   container: '${props.parentId}',` : ""
      }${props.source ? `\n    source: '${props.source}',` : ""}\n});`;
    },
    attributes: {
      isPage: false,
      possibleChildren: ["Select"],
      possibleParents: [
        "Form",
        "Assistant",
        "Tab",
        "Sublist",
        "List",
        "FieldGroup",
      ],
      possibleVariants: ["secret", "totalling", "unique"],
    },
    props: {
      variables: {
        label: null,
        type: null,
        possibleTypes: [
          {
            checkbox: {
              restrictions: {
                parent: ["Sublist"],
              },
            },
          },
          ,
          "currency",
          "date",
          {
            datetime: {
              restrictions: {
                parent: ["Sublist"],
              },
            },
          },
          {
            datetimetz: {
              restrictions: {
                parent: ["Sublist"],
              },
            },
          },

          ,
          "email",
          {
            file: {
              restrictions: {
                parent: ["Tab", "Subtab", "Sublist", "FieldGroup"],
              },
            },
          },
          "float",
          "help",
          "inlinehtml",
          "integer",
          {
            image: {
              permissions: {
                parent: ["List", "Form"],
                parentType: ["staticlist"],
              },
            },
          },
          "label",
          "longtext",
          "multiselect",
          "password",
          "percent",
          "phone",
          "select",
          {
            radio: {
              restrictions: {
                parent: ["Sublist"],
              },
            },
          },
          "richtext",
          "text",
          "textarea",
          "timeofday",
          "url",
        ],
        id: null,
        parentVar: null,
        parentId: null,
        pageVar: null,
        varName: null,
        source: null,
        breakType: null,
        restScriptIds: null,
        restrict: null,
      },
      methods: {
        // !! Credential is Currently untested!!!!
        credential: (props) => {
          return `const ${props.varName} = ${
            props.pageVar
          }.addCredentialField({\n    id: '${
            props.id
          }',\n    restrictToDomains: '${props.domain}',\n   ${
            props.scriptIds ? `restrictToScriptIds : '${props.scriptIds}'` : ""
          },${
            props.restUser
              ? `\n   restrictToCurrentUser : '${props.restUser}'`
              : ""
          },${props.parentId ? `\n   container: '${props.parentId}'` : ""}\n})`;
        },
        breakType: (props) => {
          return `${props.varName}.updateBreakType({\n    breakType: ${props.breakType}\n});`;
        },
        // example:    size={height: 40, width: 50}
        size: (props) => {
          return `${props.varName}.updateDisplaySize({
                  height: ${props.size.height},
                  width: ${props.size.width}
              });`;
        },
        layout: (props) => {},
        alias: (props) => {},
        def: (props, val) => `${props.varName}.defaultValue = '${val}';`,
        help: (props, val) => {
          return `${props.varName}.setHelpText({
    		    help: '${val}'
  			    });
  		      `;
        },
        mandatory: (props) =>
          `${props.field}.isMandatory = ${props.mandatory};`,
        link: (props) => `${props.varName}.linkText = '${props.link}';`,
        max: (props) => `${props.field}.maxLength = ${props.max};`,
        padding: (props) => `${props.varName}.padding = ${props.padding}`,
        // secret is a special variant of field
        // it's parent MUST BE a page a secret field cannot be nested in non-page components

        // special Field component variants:
        // if nested in a fieldGroup or Tab, this parent will be inferred as the container and props.parentId will be the value container is given
        secret: (props) => {
          if (props.hasOwnProperty())
            return `const ${props.varName} = ${
              props.pageVar
            }.addSecretKeyField({
              id: '${props.id}',
              ${props.label ? `label: '${props.label}'` : `label: ${props.id}`},
              ${
                props.scriptIds
                  ? `restrictToScriptIds: '${props.restScriptIds}',`
                  : ""
              }
              ${
                props.restUser
                  ? `restrictToCurrentUser: '${props.restrict}',`
                  : ""
              },
               ${props.parentId ? `container: '${props.parentId}',` : ""},
            });
  `;
        },
        // the id of the field:
        totalling: (props) => {
          return `${props.parentVar}.updateTotallingField({
      id: '${props.id}',
})`;
        },
        unique: (props) => {
          return `${props.parentVar}.updateUniqueFieldId({
  id: '${props.id}',
})`;
        },
      },
    },
  },

  Select: {
    add: (props) => {
      return `${props.parentVar}.addSelectOption({\n    value : '${
        props.value
      }',\n   text : '${props.text}',${
        props.isSelected ? `\n   isSelected: true` : ""
      }\n});`;
    },
    attributes: {
      isPage: false,
      possibleChildren: null,
      possibleParents: ["Field"],
    },
    props: {
      variables: {
        isSelected: false,
        value: null,
        text: null,
        varName: null,
        parentVar: null, // can only be Field anyways
      },
      methods: {},
    },
  },
  Button: {
    add: (props) => {
      return `const ${props.varName} = ${
        props.parentVar
      }.addButton({\n   id: '${props.id}',${
        props.label
          ? `\n   label: '${props.label}'`
          : `\n    label: '${props.id}'`
      },${
        props.pageVar === "Form" && props.fn
          ? `\n    functionName: ${props.fn}`
          : ""
      }\n});`;
    },
    attributes: {
      isPage: false,
      possibleChildren: null,
      possibleParents: ["List", "Form", "Assistant", "Sublist"],
      possibleVariants: ["hidden", "submit", "reset"],
    },
    props: {
      variables: {
        label: null,
        id: null,
        parentType: null,
        parentVar: null,
        varName: null, // the variable name of this button component
        pageVar: null, // the variable name of the page the button belongs to
        fn: null,
      },
      methods: {
        disabled: (props) =>
          `${props.buttonVar}.clientScriptModulePath = '${props.path}';`,
        hidden: (props) =>
          `${props.buttonVar}.clientScriptFileId = '${props.id}';`,
        // if submit, id disregarded, label accepted only, default: "Submit Button"
        submit: (props) => {
          return `const ${props.varName || "submitBtn"} = ${
            props.parentVar
          }.addSubmitButton({\n    ${
            props.label ? `label: '${props.label}'` : `label: "Submit Button"`
          },\n});`;
        },
        // if reset, id disregarded, label accepted only, default: "Reset Button"
        // parent MUST be a Page
        reset: (props) => {
          return `const ${props.varName || "resetBtn"} = ${
            props.parentVar
          }.addResetButton({\n    ${
            props.label ? `label: '${props.label}'` : `label: "Reset Button"`
          },\n});`;
        },
        // if reset, id AND label disregarded,
        refresh: (props) =>
          `const ${props.varName || "refreshBtn"} = ${
            props.parentVar
          }.addRefreshButton();`,
      },
    },
  },
  // creates the Page, whether thats a Form, List or Assistant
  // always gets called in the plugin
  Write: (pageVar) => {
    return `context.response.writePage({\n    pageObject: '${pageVar}'\n});`;
  },
};
