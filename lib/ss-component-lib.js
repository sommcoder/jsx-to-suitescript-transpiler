export { suiteScriptLibrary as SS };

const suiteScriptLibrary = {
  Form: {
    // ui comes from outside the scope of the component function
    add: (props) => {
      return `const ${props.varName} = ${props.ui}.createForm({
        title: '${props.title}',${props.navBar ? `hideNavBar: true` : ""}
      });`;
    },
    attributes: {
      isPage: true,
      possibleChildren: ["Sublist", "Field", "Button", "Tab", "FieldGroup"],
      possibleParents: null,
    },
    props: {
      variables: {
        parentVar: null,
        varName: null,
        title: null,
        module: null,
        fileId: null,
        ui: null,
      },
      methods: {
        module: (props) =>
          `${props.varName}.clientScriptModulePath = '${props.module}';`,
        fileId: (props) =>
          `${props.varName}.clientScriptFileId = '${props.fileId}';`,
      },
    },
  },
  List: {},
  Assistant: {},
  Tab: {
    /*
      Tabs are special!
      
      -to enable tab to appear on your form, there must be at LEAST one component assigned to the tab
      -if < 2 tabs on form, the tab will not appear. this is SS logic, transpile normally!
      -Should throw WARNING for developer, but still transpile to SuiteScript^^^

      */
    add: (props) => {
      return `
         ${props.pageVar}.addTab({
          id: '${props.id}',
          label: '${props.label}',
      });`;
    },
    attributes: {
      isPage: false,
      possibleChildren: ["Field", "Button", "Sublist", "FieldGroup"],
      possibleParents: ["Form", "List", "Assistant"],
    },
    props: {
      variables: {
        varName: null,
        parentVar: null,
        id: null,
        label: null,
        tab: null,
      },
      methods: {
        help: (props) => `${props.varName}.helpText = '${props.help}'`,
      },
    },
  },
  // PascalCase
  FieldGroup: {
    add: (props) => {
      return `const ${props.varName} = ${props.pageVar}.addFieldGroup({
        id: '${props.id}',
        label: '${props.label}',
        ${props.tab ? `tab: ${props.tab}` : ""}
     });
    `;
    },
    attributes: {
      isPage: false,
      possibleChildren: ["Field", "Button"],
      possibleParents: ["Form", "Assistant", "List", "Tab"],
    },
    props: {
      variables: {
        parentVar: null,
        varName: null,
        id: null,
        label: null,
        tab: null,
        parentid: null,
      },
      methods: {
        single: (props) => `${props.varName}.isSingleColumn;`,
        collapsible: (props) => `${props.varName}.isCollapsible = true;`,
        collapsed: (props) => `${props.varName}.isCollapsed;`,
        borderHidden: (props) => `${props.varName}.isBorderHidden = true;`,
      },
    },
  },
  Sublist: {
    add: (props) => {
      return `const ${props.varName} = ${props.pageVar}.addSublist({
      id: '${props.id}',
      label: '${props.label}',${props.type ? `\n type: ${props.type},` : ""}${
        props.tab ? `\n tab: ${props.tab}` : ""
      }
    });`;
    },
    attributes: {
      isPage: false,
      possibleChildren: ["Field", "Button"],
      possibleParents: ["Form", "Assistant", "List", "Tab"],
    },
    props: {
      // props are what are encapsulated in each JSSX component tag
      variables: {
        label: null, // what the user wants to call the component
        type: null, // the type of component
        id: null, // the autogenerated id
        tab: null, // the tab variable that the component belongs to, inferred?
        parentVar: null,
        varName: null,
        pageVar: null,
      },
      methods: {
        markAll: (props) => `${props.varName}.addMarkAllButtons();`,
      },
    },
  },
  Field: {
    add: (props) => {
      return `const ${props.varName} = ${props.parentVar}.addField({
        id: '${props.id}',
        ${
          props.label ? `label: '${props.label}'` : `label: '${props.varName}'`
        },${props.type ? `\n type: '${props.type}',` : ""}${
        props.source ? `\n source: '${props.source}',` : ""
      }
		${props.container ? `\n container: '${props.container}',` : ""}
      });`;
    },
    attributes: {
      isPage: false,
      possibleChildren: ["Select"],
      possibleParents: [
        "Form",
        "Assistant",
        "Tab",
        "Sublist",
        "List",
        "FieldGroup",
      ],
      possibleVariants: ["secret", "totalling", "unique"],
    },
    props: {
      variables: {
        label: null,
        type: null,
        id: null,
        parentVar: null,
        parentId: null,
        pageVar: null,
        varName: null,
        source: null,
        container: null,
        breakType: null,
      },
      methods: {
        credential: (props) => {
          return `const ${props.varName} = ${props.pageVar}.addCredentialField({
        id: '${props.id}',
        restrictToDomains: '${props.domain}',
        ${props.scriptIds ? `restrictToScriptIds : '${props.scriptIds}'` : ""},
        ${props.restUser ? `restrictToCurrentUser : '${props.restUser}'` : ""},
        ${props.container ? `container: '${props.container}'` : ""}
        })`;
        },

        breakType: (props) => {
          return `${props.varName}.updateBreakType({
              breakType: ${props.breakType}
            });`;
        },
        // example:    size={height: 40, width: 50}
        size: (props) => {
          return `${props.varName}.updateDisplaySize({
                  height: ${props.size.height},
                  width: ${props.size.width}
              });`;
        },
        layout: (props) => {},
        alias: (props) => {},
        def: (props, val) => `${props.varName}.defaultValue = '${val}';`,
        help: (props, val) => {
          return `${props.varName}.setHelpText({
    		    help: '${val}'
  			    });
  		      `;
        },
        mandatory: (props) =>
          `${props.field}.isMandatory = ${props.mandatory};`,
        link: (props) => `${props.varName}.linkText = '${props.link}';`,
        max: (props) => `${props.field}.maxLength = ${props.max};`,
        padding: (props) => `${props.varName}.padding = ${props.padding}`,
        // secret is a special variant of field
        // it's parent MUST BE a page a secret field cannot be nested in non-page components

        // special Field component variants:
        // if nested in a fieldGroup or Tab, this parent will be inferred as the container and props.parentId will be the value container is given
        secret: (props) => {
          return `const ${props.varName} = ${props.pageVar}.addSecretKeyField({
              id: '${props.id}',
              ${props.label ? `label: '${props.label}'` : `label: ${props.id}`},
              ${
                props.scriptIds
                  ? `restrictToScriptIds: '${props.scriptIds}',`
                  : ""
              }
              ${
                props.restUser
                  ? `restrictToCurrentUser: '${props.restUser}',`
                  : ""
              },
               ${props.container ? `container: '${props.parentId}',` : ""},
            });
  `;
        },
        // the id of the field:
        totalling: (props) => {
          return `${props.sublistVar}.updateTotallingField({
      id: '${props.id}',
})`;
        },
        unique: (props) => {
          return `${props.sublistVar}.updateUniqueFieldId({
  id: '${props.id}',
})`;
        },
      },
    },
  },

  Select: {
    add: (props) => {
      return `${props.parentVar}.addSelectOption({
                  value : '${props.value}',
                  text : '${props.text}',${
        props.isSelected ? `\n isSelected: true` : ""
      }
            });`;
    },
    attributes: {
      isPage: false,
      possibleChildren: null,
      possibleParents: ["Field"],
    },
    props: {
      variables: {
        isSelected: false,
        value: null,
        text: null,
        varName: null,
        parentVar: null, // can only be Field anyways
      },
      methods: {},
    },
  },
  Button: {
    add: (props) => {
      return `const ${props.varName} = ${props.parentVar}.addButton({
                  id: '${props.id}',
                  ${
                    props.label
                      ? `label: '${props.label}'`
                      : `label: '${props.id}'`
                  },
				  ${props.parent === "Form" && props.fn ? `functionName: ${props.fn}` : ""}
              });`;
    },
    attributes: {
      isPage: false,
      possibleChildren: null,
      possibleParents: ["Field", "Form", "Assistant", "Sublist"],
      possibleVariants: ["hidden", "submit", "reset"],
    },
    props: {
      variables: {
        label: null,
        id: null,
        parentVar: null,
        varName: null, // the variable name of this button component
        pageVar: null, // the variable name of the page the button belongs to
        fn: null,
      },
      methods: {
        disabled: (props) =>
          `${props.buttonVar}.clientScriptModulePath = '${props.path}';`,
        hidden: (props) =>
          `${props.buttonVar}.clientScriptFileId = '${props.id}';`,
        // if submit, id disregarded, label accepted only, default: "Submit Button"
        submit: (props) => {
          return `const ${props.varName || "submitBtn"} = ${
            props.parentVar
          }.addSubmitButton({
            ${
              props.label ? `label: '${props.label}'` : `label: "Submit Button"`
            },
          });
          `;
        },
        // if reset, id disregarded, label accepted only, default: "Reset Button"
        // parent MUST be a Page
        reset: (props) => {
          return `const ${props.varName || "resetBtn"} = ${
            props.parentVar
          }.addResetButton({
            ${
              props.label ? `label: '${props.label}'` : `label: "Reset Button"`
            },
          });
          `;
        },
        // if reset, id AND label disregarded,
        refresh: (props) =>
          `const ${props.varName || "refreshBtn"} = ${
            props.parentVar
          }.addRefreshButton();`,
      },
    },
  },
  // creates the Page, whether thats a Form, List or Assistant
  // always gets called in the plugin
  Write: (pageVar) => {
    return `
    context.response.writePage({
        pageObject: ${pageVar}
    });
`;
  },
};
