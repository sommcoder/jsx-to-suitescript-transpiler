import { SS } from "./ss-component-lib.js";

const ERROR = {
  illegalChar: (label) =>
    `ERROR: jsx label: ${label} contains special characters that are not permitted`,
  invalidComp: (comp) =>
    `ERR: the jsx component: ${comp}, is NOT included in the ss library. Refer to docs to see included components`,
};

// titles are autogenerated from label attribute
function createComponentId(label, path) {
  if (label && /^[a-zA-Z0-9_\s]+$/.test(label))
    return `${"custpage_" + label.trim().toLowerCase().split(" ").join("_")}
  `;
  else return path.buildCodeFrameError(ERROR.illegalChar(label));
}

function convertToCamelCase(label, path) {
  // No special character, underscore is allowed
  if (label && /^[a-zA-Z0-9_]+$/.test(label))
    return label
      .trim()
      .toLowerCase()
      .split(" ")
      .map((word, i) => {
        if (i !== 0)
          return word.charAt(0).toUpperCase() + word.slice(1, word.length);
        else return word;
      })
      .join("");
  else throw path.buildCodeFrameError(ERROR.illegalChar(label));
}

// EXPORTED FUNCTIONS to INDEX.JS
export function getSSComponentCalls(comp, attr, path) {
  console.log("comp:", comp, "attr:", attr);

  if (!SS.hasOwnProperty(comp)) {
    throw path.buildCodeFrameError(ERROR.invalidComp(comp));
  }
  const id = createComponentId(attr.id, path);
  console.log("id:", id);

  const varTitle = convertToCamelCase(attr.label, path);
  // need to figure out the best way to Visit and take in the ui-name
  // How do we use the comp object and its functions to produce the template we want???
  const suiteScriptSyntax = `${SS[comp].add(id)}\n${SS[comp][attr]}`;
  console.log("suiteScriptSyntax:", suiteScriptSyntax);
  return suiteScriptSyntax;
}

export function hasValidChildren(childrenNamesArr, comp) {
  console.log("childrenNamesArr:", childrenNamesArr);
  return childrenNamesArr.every((child) =>
    SS[comp].possibleChildren.includes(child)
  );
}
